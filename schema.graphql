# enum BalanceEventType {
#   Endowed
#   DustLost
#   Transfer
#   BalanceSet
#   Reserved
#   Unreserved
#   ReserveRepatriated
#   Deposit
#   Withdraw
#   Slashed
# }

# enum StakingEventType {
#   Rewarded
#   Slashed
#   Bonded
#   Unbonded
#   Withdrawn
# }

interface EventBase {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: BigInt!
  extrinisicHash: String
  chainName: String!
  event: String!
}

type BalanceEvent implements EventBase @entity {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: BigInt!
  extrinisicHash: String
  event: String!
  from: String @index
  to: String @index
  account: String @index
  amount: BigInt
  balanceStatus: String
  free: BigInt
  reserved: BigInt
  chainName: String! @index
}

# type SetBalanceData {
#   who: ID!
#   free: BigInt!
#   reserved: BigInt!
# }

# type MainBalanceData {
#   account: ID!
#   amount: BigInt!
# }

type StakingEvent implements EventBase @entity {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: BigInt!
  extrinisicHash: String
  event: String!
  chainName: String! @index
  account: String! @index
  amount: BigInt!
}

type Crowdloan @entity {
  id: ID!
  cap: BigInt
  firstPeriod: BigInt
  lastPeriod: BigInt
  end: BigInt
  contributors: [String]
  raised: BigInt
  parachain: Parachain
}

type CrowdloanEvent implements EventBase @entity {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: BigInt!
  extrinisicHash: String
  event: String!
  chainName: String!
  crowdloan: Crowdloan!
  amount: BigInt!
}

type Parachain @entity {
  id: ID!
  name: String
  crowdloans: [Crowdloan]! @derivedFrom(field: "parachain")
}
